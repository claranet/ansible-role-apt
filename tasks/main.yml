---
- name: Installing required packages
  ansible.builtin.apt:
    pkg: "{{ item }}"
    state: present
    update_cache: true
  loop: "{{ _apt_required_packages }}"

- name: Ensure directory structure exists
  ansible.builtin.file:
    path: "/{{ item.path }}"
    state: directory
    mode: '0755'
  with_filetree: "{{ ['../templates'] }}"  # noqa: schema
  when: item.state == "directory"

- name: Ensure files are populated from templates
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/{{ item.path }}"
    mode: '0444'
  with_filetree: "{{ ['../templates'] }}"  # noqa: schema
  when:
    - item.state == "file"
    - item.path != "etc/apt/sources.list.d/99ansible.sources"

- name: "Download apt keys"
  ansible.builtin.get_url:
    url: "{{ item.key }}"
    dest: "/usr/share/keyrings/{{ item.key | urlsplit('path') | regex_replace('/|_', '') }}"
    mode: "0664"
    validate_certs: "{{ item.key.validate_certs | default(false) }}"
  loop: "{{ apt_repositories_new }}"

- name: "Generate gpg keys"
  ansible.builtin.command:
    cmd: "gpg --dearmor /usr/share/keyrings/{{ item.key | urlsplit('path') | regex_replace('/|_', '') }}"
    creates: "/usr/share/keyrings/{{ item.key | urlsplit('path') | regex_replace('/|_', '') }}"
    chdir: "/usr/share/keyrings"
  register: _apt_generate_gpt_keys
  loop: "{{ apt_repositories_new }}"
  changed_when: _apt_generate_gpt_keys.rc != 0
  when:
    - not apt_repositories
    - not apt_keys
    - apt_repositories_new
    - item.key is defined
    - item.key is url

- name: "Lookup "
  ansible.builtin.debug:
    msg: "{{ lookup('ansible.builtin.template', 'etc/apt/sources.list.d/99ansible.sources') }}"

- name: Adding apt signing key
  ansible.builtin.apt_key:
    id: "{{ item.id | default(omit) }}"
    file: "{{ item.file | default(omit) }}"
    data: "{{ item.data | default(omit) }}"
    keyring: "{{ item.keyring | default(omit) }}"
    keyserver: "{{ item.keyserver | default(omit) }}"
    url: "{{ item.url | default(omit) }}"
    validate_certs: "{{ item.validate_certs | default(omit) }}"
    state: present
  loop: "{{ apt_keys }}"
  when: not apt_repositories_new

- name: "Adding repositories files for new distributions"
  ansible.builtin.template:
    src: "etc/apt/sources.list.d/99ansible.sources"
    dest: "/etc/apt/sources.list.d/99ansible.sources"
    mode: '0755'
  when: apt_repositories_new

- name: Adding repositories
  ansible.builtin.apt_repository:
    repo: "{{ item.repo }}"
    codename: "{{ item.codename | default(omit) }}"
    update_cache: true
  loop: "{{ apt_repositories }}"
  when:
    - not apt_repositories_new
    - item.repo is defined

- name: Upgrading system
  become: true
  ansible.builtin.apt:
    upgrade: "{{ apt_upgrade }}"
    update_cache: true
    autoremove: "{{ apt_autoremove }}"
  when: apt_upgrade

- name: Installing packages
  become: true
  ansible.builtin.apt:
    name: "{{ item.name | default(omit) }}"
    deb: "{{ item.deb | default(omit) }}"
    state: present
    autoremove: "{{ apt_autoremove }}"
    force: "{{ apt_force }}"
    dpkg_options: "{{ apt_dpkg_options | default(omit) }}"
    install_recommends: "{{ apt_install_recommends }}"
    default_release: "{{ apt_default_release | default(omit) }}"
    update_cache: true
  loop: "{{ apt_packages }}"

- name: Package unattended-upgrades
  ansible.builtin.apt:
    name: unattended-upgrades
    state: >-
      {%- if apt_config_unattended_upgrades_package_state == 'auto' -%}
      {{- (_apt_config_.APT.Periodic['Unattended-Upgrade'] == 1) | ternary('present', 'absent') -}}
      {%- else -%}
      {{- apt_config_unattended_upgrades_package_state -}}
      {%- endif -%}
    cache_valid_time: 3600

- name: Package apt-listchanges
  ansible.builtin.apt:
    name: apt-listchanges
    state: >-
      {%- if apt_config_listchanges_package_state == 'auto' -%}
      {{- (apt_config_listchanges_mail is not none) | ternary('present', 'absent') -}}
      {%- else -%}
      {{- apt_config_listchanges_package_state -}}
      {%- endif -%}
